"use client";

import { useState, useEffect } from "react";
import { useParams, useRouter } from "next/navigation";
import { trpc } from "@/lib/trpc-client";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Badge } from "@/components/ui/badge";
import { ArrowLeft, Download, Eye, FileText, Loader2 } from "lucide-react";
import Link from "next/link";
import { toast } from "sonner";

export default function GenerateDocumentPage() {
  const router = useRouter();
  const params = useParams();
  const templateId = params.id as string;

  const [variableValues, setVariableValues] = useState<Record<string, string>>({});
  const [activeTab, setActiveTab] = useState("fill");
  const [renderedContent, setRenderedContent] = useState<string>("");

  const { data: template, isLoading } = trpc.template.getById.useQuery({
    id: templateId,
  });

  useEffect(() => {
    if (template?.variables) {
      // Initialize variable values
      const initialValues: Record<string, string> = {};
      const vars = typeof template.variables === 'object' && template.variables !== null
        ? Object.keys(template.variables)
        : [];
      
      vars.forEach((v) => {
        initialValues[v] = "";
      });
      setVariableValues(initialValues);
    }
  }, [template]);

  const extractVariables = (text: string): string[] => {
    const regex = /\{\{(\w+)\}\}/g;
    const matches: string[] = [];
    let match;
    while ((match = regex.exec(text)) !== null) {
      if (!matches.includes(match[1])) {
        matches.push(match[1]);
      }
    }
    return matches;
  };

  const renderContent = (): string => {
    if (!template) return "";
    
    let rendered = template.content;
    Object.entries(variableValues).forEach(([key, value]) => {
      const regex = new RegExp(`\\{\\{${key}\\}\\}`, "g");
      rendered = rendered.replace(regex, value || `[${key}]`);
    });
    return rendered;
  };

  const handleGeneratePDF = async () => {
    if (!template) return;

    const content = renderContent();
    
    // Check if all variables are filled
    const emptyVars = Object.entries(variableValues)
      .filter(([_, value]) => !value.trim())
      .map(([key]) => key);

    if (emptyVars.length > 0) {
      toast.error(`Please fill in all variables: ${emptyVars.join(", ")}`);
      return;
    }

    try {
      // Lazy load jsPDF (reduces initial bundle by ~300KB)
      const { jsPDF } = await import("jspdf");
      
      const doc = new jsPDF();
      
      // Set document properties
      doc.setProperties({
        title: template.name,
        subject: template.description || "",
        author: "ScotComply",
        keywords: "scottish compliance, document",
        creator: "ScotComply Platform",
      });

      // Add header
      doc.setFontSize(18);
      doc.setFont("helvetica", "bold");
      doc.text(template.name, 20, 20);

      // Add date
      doc.setFontSize(10);
      doc.setFont("helvetica", "normal");
      doc.text(`Generated: ${new Date().toLocaleDateString()}`, 20, 30);

      // Add a line
      doc.setLineWidth(0.5);
      doc.line(20, 35, 190, 35);

      // Add content
      doc.setFontSize(11);
      const lines = doc.splitTextToSize(content, 170);
      let yPosition = 45;
      const pageHeight = doc.internal.pageSize.height;

      lines.forEach((line: string, index: number) => {
        if (yPosition > pageHeight - 20) {
          doc.addPage();
          yPosition = 20;
        }
        doc.text(line, 20, yPosition);
        yPosition += 7;
      });

      // Add footer
      const totalPages = doc.internal.pages.length - 1;
      for (let i = 1; i <= totalPages; i++) {
        doc.setPage(i);
        doc.setFontSize(9);
        doc.setFont("helvetica", "italic");
        doc.text(
          `Page ${i} of ${totalPages} | Generated by ScotComply`,
          doc.internal.pageSize.width / 2,
          doc.internal.pageSize.height - 10,
          { align: "center" }
        );
      }

      // Save the PDF
      const fileName = `${template.name.replace(/\s+/g, "_")}_${new Date().toISOString().split("T")[0]}.pdf`;
      doc.save(fileName);

      toast.success("PDF generated successfully!");
    } catch (error) {
      console.error("PDF generation error:", error);
      toast.error("Failed to generate PDF");
    }
  };

  useEffect(() => {
    const content = renderContent();
    setRenderedContent(content);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [variableValues, template]);

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <Loader2 className="w-8 h-8 animate-spin mx-auto text-blue-600" />
          <p className="mt-2 text-gray-600">Loading template...</p>
        </div>
      </div>
    );
  }

  if (!template) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <p className="text-gray-600">Template not found</p>
          <Link href="/dashboard/templates">
            <Button className="mt-4">Back to Templates</Button>
          </Link>
        </div>
      </div>
    );
  }

  const variables = extractVariables(template.content);

  return (
    <div className="min-h-screen bg-gray-50 p-6">
      <div className="max-w-6xl mx-auto">
        <div className="mb-6">
          <Link href="/dashboard/templates">
            <Button variant="ghost" size="sm">
              <ArrowLeft className="w-4 h-4 mr-2" />
              Back to Templates
            </Button>
          </Link>
        </div>

        <div className="flex items-center justify-between mb-6">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">Generate Document</h1>
            <p className="text-gray-600 mt-1">{template.name}</p>
          </div>
          <Button
            onClick={handleGeneratePDF}
            size="lg"
            className="bg-indigo-600 hover:bg-indigo-700"
          >
            <Download className="w-4 h-4 mr-2" />
            Download PDF
          </Button>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {/* Variable Input Form */}
          <div>
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <FileText className="w-5 h-5" />
                  Document Variables
                </CardTitle>
                <CardDescription>
                  Fill in the variables to generate your document
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                {variables.length > 0 ? (
                  variables.map((variable) => (
                    <div key={variable} className="space-y-2">
                      <Label htmlFor={variable}>
                        {variable
                          .replace(/([A-Z])/g, " $1")
                          .replace(/^./, (str) => str.toUpperCase())}
                      </Label>
                      <Input
                        id={variable}
                        value={variableValues[variable] || ""}
                        onChange={(e) =>
                          setVariableValues({
                            ...variableValues,
                            [variable]: e.target.value,
                          })
                        }
                        placeholder={`Enter ${variable}`}
                      />
                    </div>
                  ))
                ) : (
                  <p className="text-gray-500 text-sm">
                    This template has no variables to fill in.
                  </p>
                )}

                <div className="pt-4 border-t">
                  <div className="flex items-center justify-between">
                    <span className="text-sm text-gray-600">
                      Variables filled: {Object.values(variableValues).filter((v) => v.trim()).length} / {variables.length}
                    </span>
                    <Badge
                      variant={
                        Object.values(variableValues).filter((v) => v.trim()).length === variables.length
                          ? "default"
                          : "secondary"
                      }
                    >
                      {Object.values(variableValues).filter((v) => v.trim()).length === variables.length
                        ? "Ready"
                        : "Incomplete"}
                    </Badge>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Preview */}
          <div>
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Eye className="w-5 h-5" />
                  Document Preview
                </CardTitle>
                <CardDescription>
                  Preview how your document will look
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="border rounded-lg p-6 bg-white min-h-[500px]">
                  <div className="mb-4 pb-4 border-b">
                    <h2 className="text-2xl font-bold text-gray-900">{template.name}</h2>
                    <p className="text-sm text-gray-500 mt-1">
                      Generated: {new Date().toLocaleDateString()}
                    </p>
                  </div>
                  <div className="prose prose-sm max-w-none whitespace-pre-wrap">
                    {renderedContent}
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>

        <div className="mt-6">
          <Card>
            <CardHeader>
              <CardTitle>Template Information</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-2 gap-4 text-sm">
                <div>
                  <span className="font-medium text-gray-700">Category:</span>
                  <span className="ml-2 text-gray-600">
                    {template.category.replace(/_/g, " ").replace(/\b\w/g, (l: string) => l.toUpperCase())}
                  </span>
                </div>
                <div>
                  <span className="font-medium text-gray-700">Variables:</span>
                  <span className="ml-2 text-gray-600">{variables.length}</span>
                </div>
                <div className="col-span-2">
                  <span className="font-medium text-gray-700">Description:</span>
                  <span className="ml-2 text-gray-600">{template.description || "No description"}</span>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}
